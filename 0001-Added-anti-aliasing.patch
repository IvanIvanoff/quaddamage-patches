From a53270e80a9b9efbe522712ac83f60c7578d1db8 Mon Sep 17 00:00:00 2001
From: Ivan Ivanoff <ivan.ivanoff.95@gmail.com>
Date: Sat, 12 Dec 2015 00:33:49 +0200
Subject: [PATCH] Added anti aliasing

---
 src/color.h     |  26 ++++++++---
 src/constants.h |   6 ++-
 src/main.cpp    | 132 ++++++++++++++++++++++++++++++++++++++++++++++----------
 src/util.cpp    |   2 +-
 4 files changed, 137 insertions(+), 29 deletions(-)

diff --git a/src/color.h b/src/color.h
index 7eaabf2..175efb0 100644
--- a/src/color.h
+++ b/src/color.h
@@ -25,6 +25,22 @@
 #define __COLOR_H__
 
 #include "util.h"
+#include "constants.h"
+
+#define ADD_ONE(x) 1 + x
+
+inline unsigned convertTo8bit_sRGB(float x)
+{
+    if (x < 0) x = 0;
+    if (x > 1) x = 1;
+
+    if(x < SRGB_DELIMITER)
+        x *= SRGB_LOWER_MULTIPLYER;
+    else
+        x = (ADD_ONE(SRGB_ALPHA)) * pow(x, SRGB_POWER) - SRGB_ALPHA;
+
+    return nearestInt(x * 255.0f);
+}
 
 inline unsigned convertTo8bit(float x)
 {
@@ -57,9 +73,9 @@ struct Color {
 	/// the blue channel occupying the least-significant byte
 	unsigned toRGB32(int redShift = 16, int greenShift = 8, int blueShift = 0)
 	{
-		unsigned ir = convertTo8bit(r);
-		unsigned ig = convertTo8bit(g);
-		unsigned ib = convertTo8bit(b);
+		unsigned ir = convertTo8bit_sRGB(r);
+		unsigned ig = convertTo8bit_sRGB(g);
+		unsigned ib = convertTo8bit_sRGB(b);
 		return (ib << blueShift) | (ig << greenShift) | (ir << redShift);
 	}
 	/// make black
@@ -105,12 +121,12 @@ struct Color {
 		g /= divider;
 		b /= divider;
 	}
-	
+
 	inline const float& operator[] (int index) const
 	{
 		return components[index];
 	}
-	
+
 	inline float& operator[] (int index)
 	{
 		return components[index];
diff --git a/src/constants.h b/src/constants.h
index a55aaa5..c59969a 100644
--- a/src/constants.h
+++ b/src/constants.h
@@ -30,5 +30,9 @@
 #define RESY 480
 #define PI 3.141592653589793238
 #define INF 1e99
-
+#define SRGB_DELIMITER 0.0031308
+#define SRGB_LOWER_MULTIPLYER 12.92
+#define SRGB_POWER 0.41667 // equals 1/2.4
+#define SRGB_ALPHA 0.055
+#define AA_CONST 1
 #endif // __CONSTANTS_H__
diff --git a/src/main.cpp b/src/main.cpp
index a3e02d8..7834eb5 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -9,8 +9,11 @@
 #include "geometry.h"
 #include "shading.h"
 #include "environment.h"
-using std::vector;
+#include <algorithm>
+#include <iostream>
+
 
+using std::vector;
 
 Color vfb[VFB_MAX_SIZE][VFB_MAX_SIZE];
 
@@ -30,6 +33,8 @@ Vector lightPos;
 double lightIntensity;
 Color ambientLight;
 bool wantAA = true;
+//Note showAA won't do anything if wantAA is false
+bool showAA = false;
 Environment* environment;
 int maxRaytraceDepth = 10;
 
@@ -51,17 +56,17 @@ void setupScene()
 	ceilingTex.color2 = Color(0.5, 0.5, 0.5);
 	Texture* plochki = new BitmapTexture("data/floor.bmp", 100);
 	pod.texture = plochki;
-	
+
 	Layered* layeredPod = new Layered;
 	layeredPod->addLayer(&pod, Color(1, 1, 1));
 	layeredPod->addLayer(new Refl(0.9), Color(1, 1, 1) * 0.02f);
-	
+
 	ceiling.texture = &ceilingTex;
 	nodes.push_back({ &plane, layeredPod });
 	//nodes.push_back({ &plane2, &ceiling });
 	lightPos = Vector(120, 180, 0);
 	lightIntensity = 45000.0;
-	
+
 	// sphere:
 	s1.O = Vector(0, 30, -30);
 	s1.R = 27;
@@ -73,20 +78,20 @@ void setupScene()
 	blue.color1 = Color(0.2f, 0.4f, 1.0f);
 	blue.color2 = Color(0.4f, 0.4f, 0.4f);
 	blue.scaling = 2;
-	
+
 	ball.texture = new BitmapTexture("data/world.bmp");
 	ball.specularExponent = 200;
 	ball.specularMultiplier = 0.5;
-	
+
 	Layered* glass = new Layered;
 	const double IOR_GLASS = 1.6;
 	glass->addLayer(new Refr(IOR_GLASS, 0.9), Color(1, 1, 1));
 	glass->addLayer(new Refl(0.9), Color(1, 1, 1), new Fresnel(IOR_GLASS));
-	
+
 	nodes.push_back({ &s1, glass });
-	
+
 	environment = new CubemapEnvironment("data/env/forest");
-	
+
 	camera.frameBegin();
 }
 
@@ -99,7 +104,7 @@ Color raytrace(Ray ray)
 	for (auto& node: nodes) {
 		IntersectionInfo info;
 		if (!node.geom->intersect(ray, info)) continue;
-		
+
 		if (info.distance < closestDist) {
 			closestDist = info.distance;
 			closestNode = &node;
@@ -122,19 +127,34 @@ bool visibilityCheck(const Vector& start, const Vector& end)
 	ray.start = start;
 	ray.dir = end - start;
 	ray.dir.normalize();
-	
+
 	double targetDist = (end - start).length();
-	
+
 	for (auto& node: nodes) {
 		IntersectionInfo info;
 		if (!node.geom->intersect(ray, info)) continue;
-		
+
 		if (info.distance < targetDist) {
 			return false;
 		}
 	}
 	return true;
 }
+//TODO: Move to util.cpp
+inline bool is_outside(int x, int y)
+{
+    return (x < 0 || y < 0 || y >=frameHeight() || x >= frameWidth());
+}
+//TODO: Move to util.cpp
+inline float bound(float x)
+{
+    if(x < 0)
+        return 0;
+    if(x > 1)
+        return 1;
+
+    return x;
+}
 
 void render()
 {
@@ -148,21 +168,89 @@ void render()
 	Uint32 lastTicks = SDL_GetTicks();
 	for (int y = 0; y < frameHeight(); y++) {
 		for (int x = 0; x < frameWidth(); x++) {
-			if (wantAA) {
-				Color sum(0, 0, 0);
-				for (int i = 0; i < COUNT_OF(kernel); i++)
-					sum += raytrace(camera.getScreenRay(x + kernel[i][0], y + kernel[i][1]));
-				vfb[y][x] = sum / double(COUNT_OF(kernel));
-			} else {
-				Ray ray = camera.getScreenRay(x, y);
-				vfb[y][x] = raytrace(ray);
-			}
+			Ray ray = camera.getScreenRay(x, y);
+            vfb[y][x] = raytrace(ray);
 		}
 		if (SDL_GetTicks() - lastTicks > 100) {
 			displayVFB(vfb);
 			lastTicks = SDL_GetTicks();
 		}
 	}
+
+	if(!wantAA) return;
+
+    //More memory efficient than bool 2d array
+    struct point{int x,y;};
+	vector<point> needAAsamples;
+    vector<point> directions = {{-1,-1},{-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
+
+    int tmp_x, tmp_y;
+	float gcur, bcur, rcur;
+	float gsum = 0, rsum = 0, bsum = 0;
+	for (int y = 0; y < frameHeight(); y++) {
+		for (int x = 0; x < frameWidth(); x++) {
+            //this bounding in [0,1] solves the problem with overbright
+            rcur = bound(vfb[y][x].r);
+            gcur = bound(vfb[y][x].g);
+            bcur = bound(vfb[y][x].b);
+
+            for(auto& dir : directions){
+                tmp_x = x+dir.x;
+                tmp_y = y+dir.y;
+
+                //This if increases rendering time by only 0.02-0.03 seconds for frames 640x480
+                if(is_outside(tmp_x, tmp_y)) continue;
+
+                rsum += std::fabs(rcur - bound(vfb[tmp_y][tmp_x].r));
+                bsum += std::fabs(bcur - bound(vfb[tmp_y][tmp_x].b));
+                gsum += std::fabs(gcur - bound(vfb[tmp_y][tmp_x].g));
+            }
+
+
+            if(rsum > AA_CONST || gsum > AA_CONST || bsum > AA_CONST)
+            {
+                needAAsamples.push_back({x,y});
+            }
+            rsum=bsum=gsum = 0.0f;
+		}
+	}
+
+
+    //If showAA is true just make the pixels where AA is needed red
+    //else shoot rays through the kernel
+    if(showAA){
+        for(auto& a : needAAsamples)
+        {
+            vfb[a.y][a.x] = Color(1,0,0);
+
+            if(SDL_GetTicks() - lastTicks > 100){
+                displayVFB(vfb);
+                lastTicks = SDL_GetTicks();
+            }
+        }
+    }
+    else{
+        Color AAsum(0,0,0);
+        for(auto& a: needAAsamples)
+        {
+            //Get the color from vfb and don't recalculate through kernel[0][0]
+            // => i starts from 1
+            AAsum = vfb[a.y][a.x];
+            for(int i = 1; i<COUNT_OF(kernel); i++){
+                AAsum += raytrace(camera.getScreenRay(a.x + kernel[i][0], a.y + kernel[i][1]));
+            }
+             vfb[a.y][a.x] = AAsum / COUNT_OF(kernel);
+
+             //This if rises the rendering time from 1.47 to 2.15 (average)
+             if(SDL_GetTicks() - lastTicks > 100){
+                displayVFB(vfb);
+                lastTicks = SDL_GetTicks();
+             }
+
+        }
+    }
+
+
 }
 
 int main ( int argc, char** argv )
diff --git a/src/util.cpp b/src/util.cpp
index 150c8f5..12074cd 100644
--- a/src/util.cpp
+++ b/src/util.cpp
@@ -44,7 +44,7 @@ string extensionUpper(const char* fileName)
 {
 	int l = (int) strlen(fileName);
 	if (l < 2) return "";
-	
+
 	for (int i = l - 1; i >= 0; i--) {
 		if (fileName[i] == '.') {
 			string result = "";
-- 
2.6.1.windows.1

